{
  
    
        "post0": {
            "title": "Evaluation for Regression",
            "content": "Mean Absolute Error . Mean absolute error is a very intuitive and simple technique, therefore also popular. It is basically the average of the distances between the predicted and the true values. Basically the distances between the predicted and the real values are also the error terms. The overall error for the whole data is the average of all prediction error terms. We take the absolute of the distances/errors to prevent negative and positive terms/errors from cancelling each other. . $$ MAE = frac{1}{N} sum limits_{i=1}^{N}{|y_i - ŷ_i|} $$ . Advantages . MAE is not sensitive to outliers. Use MAE when you do not want outliers to play a big role in error calculated. | . Disadvantages . MAE is not differentiable globally. This is not convenient when we use it as a loss function, due to the gradient optimization method. | . Mean Squared Error (MSE) . MSE is one of widely used metrics for regression problems. MSE is the the measure of average of squared distance between the actual values and the predicted values. Squared terms help to also take into consideration of negative terms and avoid cancellation of the total error between positive and negative differences. . $$ MSE = frac{1}{N} sum limits_{i=1}^{N}{(y_i - ŷ_i)^2} $$ . Advantages . Graph of MSE is differantiable which means it can be easily used as a loss function. | MSE can be decomposed into variance and bias squared. This helps us understand the effect of variance or bias in data to the overall error. | . $$ MSE(ŷ) = Var(ŷ) + (Bias(ŷ))^2 $$ . Disadvantages . The value calculated MSE has a different unit than the target variable since it is squared. (Ex. meter --&gt; meter^2) | If there exists outliers in the data, then they are going to result in a larger error. Therefore, MSE is not robust to outliers (this can also be an advantage if you are looking to penalize outliers). | . Root Mean Squared Error (RMSE) . As the name already suggests, in RMSE we take the root of the mean of squared distances, meaning the root of MSE. RMSE is also a popularly used evaluation metric, especially in deep learning techniques. . $$ RMSE = sqrt{ frac{1}{N} sum limits_{i=1}^{N}{(y_i - ŷ_i)^2} }$$ . Advantages . The error calculated has the same unit as the target variables making the interpretation relatively easier. | . Disadvantages . Just like MSE, RMSE is also susceptible to outliers. | . R-Squared . !! R-squared may not be informative in some cases, check again if you want to include it in the lecture Is R-sqaure useless?!! . R square is a different metric compared to the ones we have discussed until now. It does not directly measure the error of the model. . R-squared evaluates the scatter of the data points around the fitted regression line. It is the percentage of the target variable variation which the model considers compared to the actual target variable variance. It is also known as the &quot;coefficient of determination&quot; or goodness of fit. . $$ R^2 = frac{ text{Variance considered by model}}{ text{Total variance}} $$ . $$ R^2 = 1 - frac{SS_{regression}}{SS_{total}} = 1 - frac{ sum{(y_i - ŷ_i)^2}}{ sum{(y_i - y_{mean})^2}} $$ . As we can see above, R-squared is calculated by dividing the sum of squared error of predictions by the total sum of square, where predicted value is replaced by the mean of real values. . R-squared is always between 0 and 1. 0 indicates that the model does not explain any of the variation in the target variable around its mean value. The regression model basically predicts the mean of the parget variable. A value of 1 indicates, that the model explains all the variance in the target variable around its mean. . A larger R-squared value usually indicates that the regression model fits the data better. However, a high R-square model does not necessarily mean a good model. . import matplotlib.pyplot as plt from sklearn.datasets import make_regression from sklearn.linear_model import LinearRegression import seaborn as sns; sns.set_theme(color_codes=True) X, y = make_regression(n_samples = 80, n_features=1, n_informative=1, bias = 50, noise = 15, random_state=42) plt.figure() ax = sns.regplot(x=X,y=y) model = LinearRegression() model.fit(X, y) print(&#39;R-squared score: {:.3f}&#39; .format(model.score(X, y))) . R-squared score: 0.977 . X, y = make_regression(n_samples = 80, n_features=1, n_informative=1, bias = 50, noise = 200, random_state=42) plt.figure() ax = sns.regplot(x=X,y=y) model = LinearRegression() model.fit(X, y) print(&#39;R-squared score: {:.3f}&#39; .format(model.score(X, y))) . R-squared score: 0.294 . Advantages . R-square is a handy, and an intuitive metric of how well the model fits the data. Therefore, it is a good metric for a baseline model evaluation. However, due to the disadvantages we are going to discuss now, it should be used carefully. | . Disadvantages . R-squared can&#39;t determine if the predictions are biased, that is why looking at the residual plots in addition is a good idea. . | R-squared does not necessarily indicate that a regression model is good to go. It is also possible to have a low R-squared score for a good regression model and a high R-squared model for a bad model (especially due to overfitting). . | When new input variables (predictors) are added to the model, the R-square is going to increase (because we are adding more variance to the data) independent of an actual performance increase in model. It never decreases when new input variables are added. Therefore, a model with many input variables may seem to have a better performance jsut because it has more input variables. This is an issue which we are going to address with adjusted R-squared. . | . It is still possible to fit a good model to a dataset with a lot of variance which is likely going to have a low R-square. However, it does not necessarily mean the model is bad if it is still able to capture the general trend in the dataset, and capture the effect of change of a predictor on the target variables. R-square becomes a big problem when we want to predict a target variable with a high precision, meaning with a small prediction interval. . A high R-squared score also does not necessarily mean a good model because it is not able to detect the bias. Therefore, also checking the residual plots is a good idea. Like we mentioned previously, a model with a high R-squared score can also be overfitting since it captures most of the variance in the data. Therefore, it is always a good idea to check the R-squared score of the predictions from the model and compare it to the R-squared score from the training data. . Adjusted R-Squared . We previously mentioned that R-square score never actually decreases but increases when we add more input variables because we increase the variance in the data. To address this issue, we are going to talk about adjusted R-squared. . The adjusted R-sqaured is adjusted version of R-square where the number of input variables in the model are also considered. R-square can penalize the additional input variables given they do not contribute to the model performance. Let&#39;s have a look at how it is calculated. . $$ R_a^2 = 1- (( frac{n-1}{n-k-1})(1-R^2)) $$ . where: . $n = text{number of data points}$, $k= text{number of input variables}$ . As number of input variables/features increase, the denominator will decrease, R-squared will increase slightly or remain constant if the added features are not relevant, meaning the complete term in paranthesis is going to increase. The resultant adjusted R-squared score is going to decrease because we deducted the increasing term from 1. . However, if the added input variables are relevant, then the R-squared score will increase much more and the term (1-R2) will decrease a lot. When we subtract the complete term in paranthesis from 1, the overall adjusted R-squared score will increase. You see how the number of added variables and the amount of R-squared increase, help us adjust the R-squared score to account for new variables depending on if they are relevant or not. . def get_adj_r2(X,y): return 1 - (1-model.score(X, y))*(len(X) - 1) / (len(X) - (X.shape[1] - 1) - 1) . X, y = make_regression(n_samples = 80, n_features=4, n_informative=1, bias = 50, noise = 60, random_state=42) model = LinearRegression() model.fit(X, y) print(&#39;R-squared score: {:.3f}&#39; .format(model.score(X, y))) print(&#39;Adjusted R-squared score: {:.3f}&#39; .format(get_adj_r2(X,y))) . R-squared score: 0.582 Adjusted R-squared score: 0.566 . X, y = make_regression(n_samples = 80, n_features=4, n_informative=1, bias = 50, noise = 60, random_state=42) model = LinearRegression() model.fit(X, y) print(&#39;R-squared score: {:.3f}&#39; .format(model.score(X, y))) print(&#39;Adjusted R-squared score: {:.3f}&#39; .format(get_adj_r2(X,y))) . R-squared score: 0.582 Adjusted R-squared score: 0.566 .",
            "url": "https://hakbilenberk.github.io/LearningML/2022/09/10/Evaluation-Regression.ipynb.html",
            "relUrl": "/2022/09/10/Evaluation-Regression.ipynb.html",
            "date": " • Sep 10, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Linear Regression in Machine Learning",
            "content": "Content prepared by: Berk Hakbilen . What is Regression? . In statistical modeling, regression analysis estimates the relationship between one or more independent variables and the dependent variable which represents the outcome. . To explain with an example you can imagine a list of houses, with information regarding to the size, distance to city center, garden (independent variables). Using these information, you can try to understand how the price(dependent variables) changes. . So for a regression analysis we have a set of observations or samples with one or more variables/features. Then, we define a dependent variable (the outcome) and try to find a relation between the dependent variables and the independent variables. The best way to do this is by finding a function which best represent the data. . Linear Models for Regression . Linear Regression . In the linear regression model, we will use regression analysis to best represent the dataset through a linear function. Then, we will use this function to predict the outcome of a new sample/observation which was not in the dataset. . Linear regression is one of the most used regression models due to its simplicity and ease of understanding the results. Let&#39;s move on to the model formulations to understand this better. . . The linear regression function is written assuming a linear relationship between the variables: . $$y = w_1x_1 + ... + w_nx_n + c$$ . where w terms are the regression coefficients, x terms are the independent variables or features, y is dependent variable/outcome and c is the constant bias term. . We can write a simple linear regression function for the houses examples we mentioned above. . $$y_{price} = 500X_{size} - 350X_{distance to city} + 400.000$$ So if we plug in the features of a new house into this function, we can predict its price (let&#39;s assume size is 150m2 and distance to city center is 5 km). $$y_{price} = 500*150 - 350*5 + 400.000 = 75.000 - 1750 + 400.000 = 476.750$$ . See how the coefficient of distance to city center is minus. Meaning closer to center, more expensive the house will be. . We can create a simple fake regression dataset with only one feature and plot it to see the data behaviour more clearly. . import matplotlib.pyplot as plt from sklearn.datasets import make_regression plt.figure() plt.title(&#39;Samples in a dataset with only one feature (dependent variable)&#39;) X, y = make_regression(n_samples = 80, n_features=1, n_informative=1, bias = 50, noise = 40, random_state=42) plt.scatter(X, y, marker= &#39;o&#39;, s=50) plt.show() . The dataset above has only one dependent variable. In this case, the regression function would be: $$y = w_1x_1 + c$$ . where w1 would be the slope the curve and c would be the offset value. . When we train our model on this data, the coefficients and the bias term will be determined automatically so that the regression function best fits the dataset. . The model algorithm finds the best coefficients for the dataset by optimizing an objective function, which in this case would be the loss function. The loss function represents the difference between the predicted outcome values and the real outcome values. . Least-Squared Linear Regression . In the Least-Squared linear regression model the coefficients and bias are determined by minimizing the sum of squared differences (SSR) for all of the samples in the data. This model is also called Ordinary Least-Squares. . $$RSS( textbf w,c) = sum limits_{i=1}^{n} {( textbf y_i - ( textbf w. textbf x_i + b))^2}$$ . If we interpret the function, it is a function determined by taking the square of the difference between the predicted outcome value and the real outcome value. . Let&#39;s train the Linear Regression model using the fake dataset we previously created and have a look at the calculated coefficients. . from sklearn.linear_model import LinearRegression from sklearn.model_selection import train_test_split X_train, X_test, y_train, y_test = train_test_split(X, y, random_state = 42) model = LinearRegression() model.fit(X_train, y_train) print(&#39;feature coefficient (w_1): {}&#39; .format(model.coef_)) print(&#39;intercept (c): {:.3f}&#39; .format(model.intercept_)) print(&#39;R-squared score (training): {:.3f}&#39; .format(model.score(X_train, y_train))) print(&#39;R-squared score (test): {:.3f}&#39; .format(model.score(X_test, y_test))) . feature coefficient (w_1): [101.41780398] intercept (c): 53.342 R-squared score (training): 0.891 R-squared score (test): 0.735 . Here, R^2 is the coefficient of determination. This term represents the amount of variation in outcome(y) explained by the dependence on features (x variables). Therefore, a larger R^2 indicates a better model performance or a better fit. . When R^2 is equal to one, then RSS is equals to 0. Meaning the predicted outcome values and the real outcome values are exactly the same. We will be using the R^2 term to measure the performance of our model. . plt.figure(figsize=(6,5)) plt.scatter(X, y, marker= &#39;o&#39;, s=50, alpha=0.7) plt.plot(X, model.coef_*X + model.intercept_, &#39;r-&#39;) plt.title(&#39;Least-squares linear regression model&#39;) plt.xlabel(&#39;Variable/feature value (x)&#39;) plt.ylabel(&#39;Outcome (y)&#39;) plt.show() . Ridge Regression - L2 Regularization . Ridge regression model calculates coefficients and the bias (w and c) using the same criteria in Least-Squared however with an extra term. . $$RSS( textbf w,c) = sum limits_{i=1}^{n} {( textbf y_i - ( textbf w. textbf x_i + b))^2} + boxed { alpha sum limits_{j=1}^{m} {w_j^2}}$$ . This term is a penalty to adjust the large variations in the coefficients. The linear prediction formula is still the same but only the way coefficients are calculated differs due to this extra penalty term. This is called regularization. It serves to prevent overfitting by restricting the variation of the coefficients which results in a less complex or simpler model. . This extra term is basically the sum of squares of the coefficients. Therefore, when we try to minimize the RSS function, we also minimize the the sum of squares of the coefficients which is called L2 regularization. Moreover, the alpha constant serves to control the influence of this regularization. This way, in comparison to the Least-Squared model, we can actually control the complexity of our model with the help of alpha term. The higher alpha term, higher the regularization is, and simpler the model will be. . The accuracy improvement with datasets including one dependent variable (feature) is not significant. However, for datasets with multiple features, regularization can be very effective to reduce model complexity, therefore overfitting and increase model performance on test set. . Let&#39;s have a look at its implementation in python. . from sklearn import datasets X,y = datasets.load_diabetes(return_X_y=True) X_train, X_test, y_train, y_test = train_test_split(X, y,random_state = 42) from sklearn.linear_model import Ridge model = Ridge() model.fit(X_train, y_train) print(&#39;feature coefficients: {}&#39; .format(model.coef_)) print(&#39;intercept (c): {:.3f}&#39; .format(model.intercept_)) . feature coefficients: [ 50.55155508 -67.72236516 278.3007281 197.62401363 -6.2459735 -26.22698465 -151.39451804 120.32319558 215.85469359 101.75554294] intercept (c): 152.514 . plt.figure(figsize=(10,5)) alphas = [1,5,10,20,50,100,500] features = [&#39;w_&#39;+str(i+1) for i,_ in enumerate(model.coef_)] for alpha in alphas: model = Ridge(alpha=alpha).fit(X_train,y_train) plt.scatter(features,model.coef_, alpha=0.7,label=(&#39;alpha=&#39;+str(alpha))) plt.axhline(0) plt.xticks(features) plt.legend(loc=&#39;upper left&#39;) plt.show() . Normalization can be applied unfairly to the features when they have different scales (when one feature has values around 0-1 and the other has from 100-1000). This can cause inaccuracies in our model when we apply regularization. In this case, feature scaling comes to our help to normalize all the values in the dataset, so that we can get rid of the scale differences. We will look in to feature scaling in another section... . Lasso Regression - L1 Regularization . Lasso regression is also a regularized linear regression model. In comparison to Ridge regression, it uses L1 regularization as the penalty term while calculating the coefficients. . Let&#39;s have a look at how the RSS function looks like with the penalty term for L1 regularization. . $$RSS( textbf w,c) = sum limits_{i=1}^{n} {( textbf y_i - ( textbf w. textbf x_i + b))^2} + boxed { alpha sum limits_{j=1}^{m} {|w_j|}}$$ . The penalty term for L1 regularization is the sum of absolute values of the coefficients. Therefore, when the algorithm tries to minimize RSS, it enforces the regularization by minimizing the sum of absolute values of the coefficients. . This results in coefficients of the least effective paramaters to be 0 which is kind of like feature selection. Therefore, it is most effectively used for datasets where there a few features with a more dominant effect compared to others. This results in eliminating features which have a small effect by setting their coefficients to 0. . Alpha term is again used to control the amount of regularization. . from sklearn.linear_model import Lasso model = Lasso() model.fit(X_train, y_train) print(&#39;feature coefficients: {}&#39; .format(model.coef_)) print(&#39;intercept (c): {:.3f}&#39; .format(model.intercept_)) . feature coefficients: [ 0. -0. 398.38436775 46.17884277 0. 0. -0. 0. 238.18740159 0. ] intercept (c): 152.944 . After finding the coefficients of the dominant features, we can go ahead and list their labels. . import numpy as np data = datasets.load_diabetes() np.take(data.feature_names,np.nonzero(model.coef_)) . array([[&#39;bmi&#39;, &#39;bp&#39;, &#39;s5&#39;]], dtype=&#39;&lt;U3&#39;) . alphas = [0.1,0.5,1,2,5,10] for alpha in alphas: model = Lasso(alpha=alpha).fit(X_train,y_train) print(&#39;feature coefficients for alpha={}: n{}&#39;.format(alpha,model.coef_)) print(&#39;R-squared score (training): {:.3f}&#39; .format(model.score(X_train, y_train))) print(&#39;R-squared score (test): {:.3f} n&#39; .format(model.score(X_test, y_test))) . feature coefficients for alpha=0.1: [ 0. -151.41550421 540.85933829 337.22472854 -85.19030645 -0. -262.90345036 0. 418.24822392 9.92430726] R-squared score (training): 0.508 R-squared score (test): 0.502 feature coefficients for alpha=0.5: [ 0. -0. 492.28522027 187.79307581 -0. -0. -107.63391392 0. 322.2269439 0. ] R-squared score (training): 0.451 R-squared score (test): 0.477 feature coefficients for alpha=1: [ 0. -0. 398.38436775 46.17884277 0. 0. -0. 0. 238.18740159 0. ] R-squared score (training): 0.347 R-squared score (test): 0.379 feature coefficients for alpha=2: [ 0. 0. 75.24915126 0. 0. 0. -0. 0. 0. 0. ] R-squared score (training): 0.052 R-squared score (test): 0.041 feature coefficients for alpha=5: [ 0. 0. 0. 0. 0. 0. -0. 0. 0. 0.] R-squared score (training): 0.000 R-squared score (test): -0.014 feature coefficients for alpha=10: [ 0. 0. 0. 0. 0. 0. -0. 0. 0. 0.] R-squared score (training): 0.000 R-squared score (test): -0.014 . Ridge or Lasso? . To sum up, it makes sense to use the Ridge regression model there are many small to medium effective features. If there are only a few dominantly effective features, use the Lasso regression model. . Polynomial Regression . Linear regression performs well on the assumption that the relationship between the independent variables (features) and the dependent variable(outcome) is linear. If the distrubtion of the data is more complex and does not show a linear behaviour, can we still use linear models to represent such datasets? This is where polynomial regression comes in very useful. . To capture this complex behaviour, we can add higher order terms to represent the features in the data. Transforming the linear model with one feature: . $$y = w_1x + c rightarrow boxed{y=w_1x + w_2x^2 + c} $$ . Since the coefficients are related to features linearly, this is still a liner model. However, it contains quadratic terms and the curve fitted is a polynomial curve. . Let&#39;s continue with an example for Polynomial regression. To convert the features to higher order terms, we can use the PolynomialFeatures class from scikit-learn. Then we can use the Linear regression model from before to train the model. . But before, let us create a dataset which could be a good fit for a 2nd degree function. For that we will use numpy to create random X points and plug them into a representative function. . np.random.seed(0) X = 2 - 3 * np.random.normal(0, 1, 100) y = X - 2 * (X ** 2) + np.random.normal(-3, 3, 100) plt.scatter(X, y, s=10) plt.show() . We can reshape the arrays we created so that we can feed them in to the model. First, we will train a LinearRegression model to see how it fits to this data. . X = X[:, np.newaxis] y = y[:, np.newaxis] model = LinearRegression() model.fit(X,y) print(&#39;feature coefficients: n{}&#39;.format(model.coef_)) print(&#39;R-squared score (training): {:.3f}&#39; .format(model.score(X, y))) plt.plot(X, model.coef_*X + model.intercept_, &#39;r-&#39;) plt.scatter(X,y, s=10) plt.show() . feature coefficients: [[-6.36572661]] R-squared score (training): 0.397 . As expected, Linear Regression model does not provide a very good fit with the normal features for a dataset of this behaviour. Now, we can create 2nd order Polynomial features using the PolynomialFeatures class from sk-learn library. Then, use these new 2nd order features to train the same linear regression model. . from sklearn.preprocessing import PolynomialFeatures poly_features= PolynomialFeatures(degree=2) X_poly = poly_features.fit_transform(X) model = LinearRegression() model.fit(X_poly,y) print(&#39;feature coefficients: n{}&#39;.format(model.coef_)) print(&#39;R-squared score (training): {:.3f}&#39; .format(model.score(X_poly, y))) plt.scatter(X,model.predict(X_poly),s=10,label=&quot;polynomial prediction&quot;) plt.scatter(X,y,s=10,label=&quot;real data&quot;) plt.legend(loc=&#39;lower left&#39;) plt.show() . feature coefficients: [[ 0. 0.96597113 -2.02225052]] R-squared score (training): 0.990 . This time, we were able to obtain a very good fit using the same linear regression model but with 2nd order features obtained from the PolynomialFeatures class. This is a perfect example to show how Polynomial Linear Regression can be used to obtain better fits with data which do not have a linear relationship between the features and the outcome value. .",
            "url": "https://hakbilenberk.github.io/LearningML/jupyter/2022/03/19/Linear-Regression.ipynb.html",
            "relUrl": "/jupyter/2022/03/19/Linear-Regression.ipynb.html",
            "date": " • Mar 19, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://hakbilenberk.github.io/LearningML/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://hakbilenberk.github.io/LearningML/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Hey there👋 My name is Berk Hakbilen. I am currently working as a data scientist. I transitioned into a career into data science after discovering my passion for data and developing myself in the field of data science as a hobby. During this transition, free online material available was a huge help for me. That’s why I decided to create this blog, to publish some of the free learning material that I have created in my free time, so that it can be helpful for others who are interested about data science! . I hope this material is useful for you. If you have any questions or feedback, feel free to contact me! . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://hakbilenberk.github.io/LearningML/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://hakbilenberk.github.io/LearningML/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}